#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import unittest

import os
import tempfile

import model_compiler_for_papyrusrt.build_configuration.build_configuration as build_configuration
import model_compiler_for_papyrusrt.generator.target_specific_cmakelists_generator as target_specific_cmakelists_generator


class TestTargetSpecificCMakeListsGenerator(unittest.TestCase):

    def setUp(self):
        self.__data_dir = os.path.dirname(os.path.abspath(__file__)) + os.sep + 'data'
        self.maxDiff = None


    def test_typical_executable_aliceandbob(self):
        source_files = [
            'TopAliceAndBob.cc',
            'Alice.cc',
            'Bob.cc',
            'AliceAndBobProtocol.cc',
        ]
        with tempfile.TemporaryDirectory() as tmpdir:
            bc = build_configuration.BuildConfiguration(self.__data_dir + os.sep + 'bc_typical_executable_aliceandbob.xml')
            obj = target_specific_cmakelists_generator.TargetSpecificCMakeListsGenerator(tmpdir, bc, source_files)
            expected_str = '''
# @brief Build script for Papyrus-RT project
#
# Do NOT edit!!!
# Generated by the Model Compiler for Papyrus-RT

# ---> User declaration preface

# userDeclarationPreface
# nothing to do

# <--- User declaration preface

# ---> User declaration before target

# userDeclarationBeforeTarget
# nothing to do

# <--- User declaration before target

add_executable( AliceAndBob
    TopAliceAndBob.cc
    Alice.cc
    Bob.cc
    AliceAndBobProtocol.cc
)

# ---> User declaration after target

# userDeclarationAfterTarget
if (MSVC)
    target_link_libraries(
        AliceAndBob
        PUBLIC
            ws2_32.lib
    )
endif ()

# <--- User declaration after target

target_include_directories( AliceAndBob
    PUBLIC
        src
)

target_compile_options( AliceAndBob
    PRIVATE
        -DNEED_NON_FLEXIBLE_ARRAY
)

target_link_libraries( AliceAndBob
    PRIVATE
        libumlrts
)



# ---> User declaration ending

# userDeclarationEnding
# nothing to do

# <--- User declaration ending

'''[1:]

            self.assertEqual(expected_str, obj._get_str())

            obj.generate()
            self.assertEqual(True, os.path.isfile(tmpdir + os.sep + 'CMakeLists.txt'))


    def test_typical_library_foo(self):
        source_files = [
            'Top.cc',
        ]
        with tempfile.TemporaryDirectory() as tmpdir:
            bc = build_configuration.BuildConfiguration(self.__data_dir + os.sep + 'bc_typical_library_foo.xml')
            obj = target_specific_cmakelists_generator.TargetSpecificCMakeListsGenerator(tmpdir, bc, source_files)
            expected_str = '''
# @brief Build script for Papyrus-RT project
#
# Do NOT edit!!!
# Generated by the Model Compiler for Papyrus-RT



add_library( libFoo STATIC
    Top.cc
)


target_include_directories( libFoo
    PUBLIC
        src
)






'''[1:]

            self.assertEqual(expected_str, obj._get_str())

            obj.generate()
            self.assertEqual(True, os.path.isfile(tmpdir + os.sep + 'CMakeLists.txt'))

if __name__ == '__main__':
    # executed
    unittest.main()
